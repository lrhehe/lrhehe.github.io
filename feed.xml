<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lrhehe&#39;s blog</title>
    <link>http://blog.lrhehe.com/</link>
    <description>Recent content on lrhehe&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Apr 2016 12:24:04 +0800</lastBuildDate>
    <atom:link href="http://blog.lrhehe.com/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android 插件化开发</title>
      <link>http://blog.lrhehe.com/post/Andriod%20%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 02 Apr 2016 12:24:04 +0800</pubDate>
      
      <guid>http://blog.lrhehe.com/post/Andriod%20%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</guid>
      <description>

&lt;h2 id=&#34;一-背景:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;一、背景&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;www.yudanfudao.com&#34;&gt;猿辅导&lt;/a&gt; android app 的实际开发维护中遇到两个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;代码维护问题：代码主要有两个部分，直播相关和直播无关。开发人员已经分为客户端和直播两个小组，但是两边的代码还在一个仓库中，不方便维护。&lt;/li&gt;
&lt;li&gt;上线问题：每次上线，都需要两个小组的人员一起守候到很晚（现在采用了灰度发布，好很多了）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而理想情况是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;代码分离，各自维护一个仓库，客户端依赖直播库&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了代码分离，我们将所有直播相关内容拆分出来，得到直播库。
2. 独立实时上线，直播库可随时上线，而不需要客户端发布新版&lt;/p&gt;

&lt;p&gt;为了独立实时上线，需要将直播部分做成猿辅导 app 的插件。&lt;/p&gt;

&lt;h2 id=&#34;二-现存方案比较:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;二、现存方案比较&lt;/h2&gt;

&lt;p&gt;下图是来自 &lt;a href=&#34;https://github.com/wequick/Small&#34;&gt;Small&lt;/a&gt; 框架作者给出的&lt;a href=&#34;https://github.com/wequick/Small/tree/master/Android&#34;&gt;各个现有框架在 9 个方面的支持情况&lt;/a&gt;：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;DyLA&lt;/th&gt;
&lt;th&gt;DiLA&lt;/th&gt;
&lt;th&gt;ACDD&lt;/th&gt;
&lt;th&gt;DyAPK&lt;/th&gt;
&lt;th&gt;DPG&lt;/th&gt;
&lt;th&gt;APF&lt;/th&gt;
&lt;th&gt;Small&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;加载非独立插件[1]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;加载.so插件&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;! [2]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Activity生命周期&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Service动态注册&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;x [3]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;资源分包共享[4]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;! [5]&lt;/td&gt;
&lt;td&gt;![5]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;! [6]&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;公共插件打包共享[7]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;支持AppCompat[8]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;支持本地网页组件&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;支持联调插件[9]&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;[1] 独立插件：一个完整的apk包，可以独立运行。比如从你的程序跑起淘宝、QQ，但这加载起来是要闹哪样？非独立插件：依赖于宿主，宿主是个壳，插件可使用其资源代码并分离之以最小化，这才是业务需要嘛。&lt;/p&gt;

&lt;p&gt;&amp;ndash; _“所有不能加载非独立插件的插件化框架都是耍流氓”_。&lt;/p&gt;

&lt;p&gt;[2] ACDD加载.so用了Native方法(libdexopt.so)，不是Java层，源码似乎未共享。&lt;/p&gt;

&lt;p&gt;[3] Service更新频度低，可预先注册在宿主的manifest中，如果没有很好的理由说服我，现不支持。&lt;/p&gt;

&lt;p&gt;[4] 要实现宿主、各个插件资源可互相访问，需要对他们的资源进行分段处理以避免冲突。&lt;/p&gt;

&lt;p&gt;[5] 这些框架修改aapt源码、重编、覆盖SDK Manager下载的aapt，我只想说_“杀(wan)鸡(de)焉(kai)用(xin)牛(jiu)刀(hao)”&lt;em&gt;。 Small使用gradle-small-plugin，在后期修改二进制文件，实现了&lt;/em&gt;&lt;strong&gt;PP&lt;/strong&gt;_段分区。&lt;/p&gt;

&lt;p&gt;[6] 使用public-padding对资源id的_&lt;strong&gt;TT&lt;/strong&gt;_段进行分区，分开了宿主和插件。但是插件之间无法分段。&lt;/p&gt;

&lt;p&gt;[7] 除了宿主提供一些公共资源与代码外，我们仍需封装一些业务层面的公共库，这些库被其他插件所依赖。公共插件打包的目的就是可以单独更新公共库插件，并且相关插件不需要动到。&lt;/p&gt;

&lt;p&gt;[8] AppCompat: Android Studio默认添加的主题包，Google主推的Metrial Design包也依赖于此。大势所趋。&lt;/p&gt;

&lt;p&gt;[9] 联调插件：使用Android Studio调试宿主时，可直接在插件代码中添加断点调试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们需要：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;支持 native 库 (猿辅导直播用到 native 库)&lt;/li&gt;
&lt;li&gt;支持非独立插件并支持动态更新插件 (直播库是非独立插件，需要独立实时上线)&lt;/li&gt;
&lt;li&gt;迁移简单方便 (避免引入过多的坑)&lt;/li&gt;
&lt;li&gt;活跃度高 (方便学习，交流，和解决问题)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，选定 Small 框架进行进一步了解。&lt;/p&gt;

&lt;h2 id=&#34;三-插件化原理:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;三、插件化原理&lt;/h2&gt;

&lt;h3 id=&#34;android-相关基础:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;Android 相关基础&lt;/h3&gt;

&lt;p&gt;要想去弄明白 Android 插件化的原理，需要先了解一些 Android 基础知识。一个是 Android 打包 apk 的流程，另外一个是 Android 加载 apk 的流程。&lt;/p&gt;

&lt;h4 id=&#34;打包流程:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;打包流程&lt;/h4&gt;

&lt;p&gt;可以参见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/sdk/installing/studio-build.html&#34;&gt;Build System Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/jason0539/article/details/44917745&#34;&gt;android Apk打包过程概述_android是如何打包apk的&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单来说，一个apk主要是两部分，代码和资源。使用 aapt 命令可以方便查看其中内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; aapt l sample.apk
AndroidManifest.xml
assets/bundle.json
res/anim/abc_fade_in.xml
...
resources.arsc
classes.dex
META-INF/MANIFEST.MF
META-INF/CERT.SF
META-INF/CERT.RSA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class.dex 文件是代码部分。&lt;/p&gt;

&lt;p&gt;而资源复杂一点，可以参考老罗的一篇博客：&lt;a href=&#34;http://blog.csdn.net/luoshengyang/article/details/8744683&#34;&gt;Android应用程序资源的编译和打包过程分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单来说就是资源分为 res 和 assets。&lt;/p&gt;

&lt;p&gt;assets 和 res 里面的 raw 类型，还有二进制图片文件会保持不变，打包到 apk 中。&lt;/p&gt;

&lt;p&gt;res 中的所有资源都会被分配一个 id，layout 中使用 @+id 的也会生成一个 id，保存为 resources.arsc 打包进 apk。之后，所有 res 中的 xml 文件中的对应的地方会被对应的 id 替换，并重新编译成二进制文件。&lt;/p&gt;

&lt;h4 id=&#34;加载过程:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;加载过程&lt;/h4&gt;

&lt;p&gt;主要为代码加载和资源加载&lt;/p&gt;

&lt;p&gt;代码加载可以参考：&lt;a href=&#34;http://daojin.iteye.com/blog/1847093&#34;&gt;安卓高手之路之ClassLoader(二)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以继续参考老罗的博客：&lt;a href=&#34;http://blog.csdn.net/luoshengyang/article/details/6689748&#34;&gt;Android应用程序启动过程源代码分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单来说就是：&lt;/p&gt;

&lt;p&gt;代码加载可以通过 DexClassLoader 加载 class.dex  (系统启动应用程序略有不同，可细看上面的文章)&lt;/p&gt;

&lt;p&gt;资源加载通过 AssetManager 加载资源文件&lt;/p&gt;

&lt;h3 id=&#34;要解决的问题:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;要解决的问题&lt;/h3&gt;

&lt;p&gt;插件化简单说就是从一个主应用 (宿主) 中去启动其他未在系统安装的 apk 插件或者库文件。所以会有下面一些要解决的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;动态加载插件中的 class&lt;/li&gt;
&lt;li&gt;动态加载插件中的资源，这里要保证能够和宿主还有其他已加载的插件的兼容&lt;/li&gt;
&lt;li&gt;启动未注册的 activity&lt;/li&gt;
&lt;li&gt;生命周期管理&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;常见解决方案:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;常见解决方案&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;动态加载插件中的 class&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用 DexClassLoader 加载对应插件的代码&lt;/p&gt;

&lt;p&gt;可以参考 Small 项目：&lt;a href=&#34;https://github.com/wequick/Small/wiki/Android-dynamic-load-classes&#34;&gt;Dynamic load classes&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;动态加载插件中的资源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方案1： 使用 AssetManager 加载对应的插件的资源文件，不过为了保证宿主还有各插件之间的资源文件 id 不冲突，在编译阶段，修改了输出文件中的资源文件 id。可以参考 Small 项目：&lt;a href=&#34;https://github.com/wequick/Small/tree/master/Android/DevSample/buildSrc&#34;&gt;Gradle-Small-Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以参考 Small 项目：&lt;a href=&#34;https://github.com/wequick/Small/wiki/Android-dynamic-load-resources&#34;&gt;Dynamic load resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;方案2： 新建一套 AssetManager 和  Resources，在插件 Activity 打开的时候，将&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;启动未注册的 activity 和生命周期管理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方案1：使用代理 Activity，可以参考 &lt;a href=&#34;https://github.com/singwhatiwanna/dynamic-load-apk&#34;&gt;Dynamic-load-Apk&lt;/a&gt; 项目&lt;/p&gt;

&lt;p&gt;方案2：瞒天过海，简单讲就是预先注册一些 Activity (比如A, A1, &amp;hellip;) 作为壳，然后在准备启动插件 Actvity B 的时候，将其替换成 A 传给系统，但是在系统去生成 A 的时候，生成一个 B 出来，传给系统。这样就实现了未注册 Activity 的启动，也保证了其生命周期。不过在启动一些特殊 flag 的 Activity 时，比如 singleInstance，singleTask 和 singleTop 的 activity，存在限制。&lt;/p&gt;

&lt;p&gt;可以参考 Small 项目：&lt;a href=&#34;https://github.com/wequick/Small/wiki/Android-dynamic-register-activities&#34;&gt;Dynamic register activities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##四、针对模块拆分和动态更新的最简方案&lt;/p&gt;

&lt;p&gt;根据代码分离，实时上线的需求，设计了下面的方案：&lt;/p&gt;

&lt;h3 id=&#34;针对场景:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;针对场景&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;模块拆分：将工程中模块（application 或者 library）打包成独立插件 （plugin），宿主（Host）启动后进行加载&lt;/li&gt;
&lt;li&gt;动态更新：可下载插件，对原插件进行动态更新（重启应用可生效）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;原理:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;原理&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用 DexClassLoader 加载插件代码&lt;/li&gt;
&lt;li&gt;给每个插件建立一套 AssetManager 和  Resources，借鉴 &lt;a href=&#34;https://github.com/singwhatiwanna/dynamic-load-apk&#34;&gt;Dynamic-load-Apk&lt;/a&gt; 项目&lt;/li&gt;
&lt;li&gt;代理 Instrumentation（借鉴 &lt;a href=&#34;https://github.com/wequick/Small&#34;&gt;Small&lt;/a&gt; 项目），在启动插件 Activity 的时候设置对应的资源&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;优势:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;优势&lt;/h3&gt;

&lt;p&gt;采用最简单的方案，引入最少的坑&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不用对现有代码做修改&lt;/li&gt;
&lt;li&gt;不用对资源做修改&lt;/li&gt;
&lt;li&gt;原生的 Activity 启动方式（存在局限，见局限1）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;局限:c600ce58f5db185da8297985ea4b3e2d&#34;&gt;局限&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;插件的 Activity 和 Service 要在宿主中进行注册&lt;/li&gt;
&lt;li&gt;由于每个插件一套独立资源，宿主，插件之间不能够互相访问资源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体参见：&lt;a href=&#34;https://github.com/lrhehe/AndroidHostPlugin&#34;&gt;AndroidHostPlugin&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用GitHub Pages和Wercker搭建自动部署的个人博客</title>
      <link>http://blog.lrhehe.com/post/build-autodeploy-user-gh-page/</link>
      <pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lrhehe.com/post/build-autodeploy-user-gh-page/</guid>
      <description>

&lt;h3 id=&#34;what:04f2d6a4e2142a2a79db56be6c61559b&#34;&gt;What&lt;/h3&gt;

&lt;p&gt;​   用markdown写博客，用git进行版本控制，用&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;生成网站，用&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;自动化部署到 GitHubPage&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.lrhehe.com/img/my-gh-page-flow.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;My GithubPages&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h3 id=&#34;why:04f2d6a4e2142a2a79db56be6c61559b&#34;&gt;Why&lt;/h3&gt;

&lt;p&gt;​   一直都想好好维护自己的个人博客，曾尝试用自建的WordPress写过几篇文章，后无疾而终。原因种种，种种原因，就不写在这里了。然而理想依然在，折腾无止境。&lt;/p&gt;

&lt;p&gt;​   想了一下，我对这一次搭建的个人博客有下面一些要求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用git管理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用markdown编辑&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;越简单越好&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​   前两个要求是因为不想学习新软件的使用，而是花时间在一些能一直用的技术上。最后一个要求是因为懒，不想维护服务器，不想做各种配置，这些复杂的东西实在太容易忘记了。&lt;/p&gt;

&lt;h3 id=&#34;how:04f2d6a4e2142a2a79db56be6c61559b&#34;&gt;How&lt;/h3&gt;

&lt;p&gt;​   作为一个软件开发人员，最熟的就是代码仓库了，如果维护个人博客就像维护一个代码仓库一样就好了。写上一篇博客，commit，push，然后大功告成！想想就开心啊。&lt;/p&gt;

&lt;p&gt;​   为了不维护服务器，选用了Github Pages，感谢非常有良心的github；使用&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;（对golang感兴趣，所以选了这个）来作为website engine，负责将文件构建成网站；使用&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;来做自动化部署，每次push新的commit都会重新编译和部署网站。&lt;/p&gt;

&lt;p&gt;​   具体实现主要参考了Hugo的文档&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本地新建Hugo Project，push到Github，这是代码仓库&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Github上新建 [your username].github.io，这是博客仓库&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;连接代码仓库到Wercker，配置自动部署，将代码仓库的public文件夹内容push到博客仓库即可&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;可以参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GithubPages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Automated deployments with Wercker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lrhehe/my-hugo-github-pages&#34;&gt;my-hugo-github-pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lrhehe/lrhehe.github.io&#34;&gt;lrhehe.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclude:04f2d6a4e2142a2a79db56be6c61559b&#34;&gt;Conclude&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;清楚需求很重要，根据需求来选合适的实现方案&lt;/li&gt;
&lt;li&gt;连接的红利，Wrecker 和 Github 相连，让世界变简单&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>